{"version":3,"sources":["components/PostList/PostCard.js","hooks/usePosts.js","components/PostList/index.js","components/Post/index.js","hooks/useMarkdownPost.js","pages/Projects/Project.js","hooks/usePost.js","pages/Projects/index.js","pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["PostCard","props","slug","title","description","img","to","src","alt","usePosts","type","useState","posts","setPosts","loading","setLoading","useEffect","a","async","fetch","res","console","error","ok","json","fetchPosts","PostList","Object","keys","map","post","key","defaultProps","Post","markdown","setMarkdown","text","md","rendered","unified","use","parse","remark2react","processSync","contents","useMarkdownPost","Project","usePost","useParams","project","Projects","match","useRouteMatch","path","Home","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.664ee102.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nfunction PostCard(props) {\n  const { slug, title, description, img } = props;\n  return (\n    <div>\n      <Link to={slug}>{title}</Link>\n      <p>{description}</p>\n      {img && <img src={img} alt={`${title} preview`} />}\n    </div>\n  );\n}\n\nPostCard.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  img: PropTypes.string,\n  src: PropTypes.string.isRequired\n};\n\nexport default PostCard;\n","import { useState, useEffect } from \"react\";\n\nexport default function usePosts(type = \"projects\") {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let res;\n\n      try {\n        res = await fetch(`/posts/${type}.json`);\n      } catch (error) {\n        setLoading(false);\n        console.error(`Error loading posts for type ${type}`);\n        return { loading };\n      }\n      if (res.ok) {\n        setPosts(await res.json());\n      }\n      setLoading(false);\n    };\n    fetchPosts();\n  }, [type, loading]);\n\n  return { loading, posts };\n}\n","import React from \"react\";\nimport PostCard from \"./PostCard\";\nimport usePosts from \"../../hooks/usePosts\";\nimport PropTypes from \"prop-types\";\n\nfunction PostList(props) {\n  const { type } = props;\n  const { loading, posts } = usePosts(type);\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      {Object.keys(posts).map(post => (\n        <div key={post}>\n          <PostCard slug={`/${type}/${post}`} {...posts[post]} />\n          <hr />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nPostList.propTypes = {\n  type: PropTypes.string\n};\n\nPostList.defaultProps = {\n  type: \"projects\"\n};\n\nexport default PostList;\n","import React from \"react\";\nimport useMarkdownPost from \"../../hooks/useMarkdownPost\";\n\nfunction Post(props) {\n  const { title, src } = props;\n\n  const { loading, rendered } = useMarkdownPost(src);\n\n  if (loading) return <div>Loading...</div>;\n  if (!rendered) return <div>Error loading post</div>;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      {rendered}\n    </div>\n  );\n}\n\nexport default Post;\n","import { useState, useEffect } from \"react\";\nimport unified from \"unified\";\nimport parse from \"remark-parse\";\nimport remark2react from \"remark-react\";\n\nexport default function useMarkdownPost(src) {\n  const [markdown, setMarkdown] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let res;\n\n      try {\n        res = await fetch(`/posts/${src}`);\n      } catch (error) {\n        console.error(`Error loading post ${src}}`);\n        setLoading(false);\n        return { loading };\n      }\n      if (res.ok) {\n        const md = await res.text();\n        setMarkdown(md);\n      }\n\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, [src, loading]);\n\n  if (loading) return { loading };\n\n  const rendered = unified()\n    .use(parse)\n    .use(remark2react)\n    .processSync(markdown).contents;\n\n  return { loading, rendered };\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport usePost from \"../../hooks/usePost\";\nimport Post from \"../../components/Post\";\n\nexport default function Project() {\n  let { project } = useParams();\n\n  const { loading, post } = usePost(project, \"projects\");\n\n  if (loading) return <div>Loading...</div>;\n\n  if (!post) return <div>Post not found</div>;\n\n  return <Post {...post} />;\n}\n","import usePosts from \"./usePosts\";\n\nexport default function usePost(slug, type) {\n  const { loading, posts } = usePosts(type);\n\n  if (loading) return { loading };\n\n  return { loading, post: posts[slug] };\n}\n","import React from \"react\";\nimport PostList from \"../../components/PostList\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport Project from \"./Project\";\n\nexport default function Projects() {\n  const match = useRouteMatch();\n\n  return (\n    <div>\n      <h1>Projects</h1>\n      <Switch>\n        <Route path={`${match.path}/:project`}>\n          <Project />\n        </Route>\n        <Route path={match.path}>\n          <PostList />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\n\nexport default function Home() {\n  const match = useRouteMatch();\n\n  return (\n    <div>\n      <h1>Home</h1>\n      <Switch>\n        <Route path={match.path}>\n          <h1>Welcome!</h1>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Projects from \"./pages/Projects\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/projects\">Projects</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}