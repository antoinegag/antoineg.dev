{"version":3,"sources":["components/PostList/PostCard.js","hooks/usePosts.js","components/PostList/index.js","components/Post/index.js","hooks/useMarkdownPost.js","pages/Projects/Project.js","hooks/usePost.js","pages/Projects/index.js","pages/Home/index.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["PostCard","props","slug","title","description","img","link","github","tech","indev","Card","CardBody","CardTitle","tag","to","Badge","className","color","CardSubtitle","src","alt","CardText","join","CardLink","href","usePosts","type","useState","posts","setPosts","loading","setLoading","useEffect","a","async","fetch","res","console","error","ok","json","fetchPosts","PostList","Row","Object","keys","map","post","Col","md","key","defaultProps","Post","markdown","setMarkdown","text","rendered","unified","use","parse","remark2react","processSync","contents","useMarkdownPost","Project","usePost","useParams","project","Projects","match","useRouteMatch","path","Home","Container","Jumbotron","class","NavBar","isOpen","setIsOpen","Navbar","dark","expand","NavbarToggler","onClick","Collapse","navbar","Nav","NavLink","Link","NavItem","target","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f681909b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Card,\n  CardText,\n  CardBody,\n  CardLink,\n  CardTitle,\n  CardSubtitle,\n  Badge\n} from \"reactstrap\";\n\nfunction PostCard(props) {\n  const { slug, title, description, img, link, github, tech, indev } = props;\n  return (\n    <div>\n      <Card>\n        <CardBody>\n          <CardTitle tag=\"h3\">\n            <Link to={`${slug}`}>{title}</Link>\n            {indev && (\n              <Badge className=\"ml-2\" color=\"info\">\n                In Development\n              </Badge>\n            )}\n          </CardTitle>\n          <CardSubtitle>{description}</CardSubtitle>\n        </CardBody>\n        {img && <img src={img} alt={`${title} preview`} />}\n        <CardBody>\n          <CardText>\n            <p>{description}</p>\n            {tech && <p>Technologies: {tech.join(\", \")}</p>}\n          </CardText>\n          {link && <CardLink href={link}>Project Link</CardLink>}\n          {github && (\n            <CardLink className=\"link-unstyled\" href={github}>\n              <u>\n                <i className=\"fab fa-github mr-2\" />\n                Github Repo\n              </u>\n            </CardLink>\n          )}\n        </CardBody>\n      </Card>\n    </div>\n  );\n}\n\nPostCard.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  img: PropTypes.string,\n  src: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  github: PropTypes.string,\n  tech: PropTypes.arrayOf(PropTypes.string),\n  indev: PropTypes.bool\n};\n\nexport default PostCard;\n","import { useState, useEffect } from \"react\";\n\nexport default function usePosts(type = \"projects\") {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let res;\n\n      try {\n        res = await fetch(`/posts/${type}.json`);\n      } catch (error) {\n        setLoading(false);\n        console.error(`Error loading posts for type ${type}`);\n        return { loading };\n      }\n      if (res.ok) {\n        setPosts(await res.json());\n      }\n      setLoading(false);\n    };\n    fetchPosts();\n  }, [type, loading]);\n\n  return { loading, posts };\n}\n","import React from \"react\";\nimport PostCard from \"./PostCard\";\nimport usePosts from \"../../hooks/usePosts\";\nimport { Row, Col } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction PostList(props) {\n  const { type } = props;\n  const { loading, posts } = usePosts(type);\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <Row>\n      {Object.keys(posts).map(post => (\n        <Col md=\"6\" className=\"mb-3\" key={post}>\n          <PostCard slug={`/${type}/${post}`} {...posts[post]} />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nPostList.propTypes = {\n  type: PropTypes.string\n};\n\nPostList.defaultProps = {\n  type: \"projects\"\n};\n\nexport default PostList;\n","import React from \"react\";\nimport useMarkdownPost from \"../../hooks/useMarkdownPost\";\n\nfunction Post(props) {\n  const { title, src } = props;\n\n  const { loading, rendered } = useMarkdownPost(src);\n\n  if (loading) return <div>Loading...</div>;\n  if (!rendered) return <div>Error loading post</div>;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      {rendered}\n    </div>\n  );\n}\n\nexport default Post;\n","import { useState, useEffect } from \"react\";\nimport unified from \"unified\";\nimport parse from \"remark-parse\";\nimport remark2react from \"remark-react\";\n\nexport default function useMarkdownPost(src) {\n  const [markdown, setMarkdown] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let res;\n\n      try {\n        res = await fetch(`/posts/${src}`);\n      } catch (error) {\n        console.error(`Error loading post ${src}}`);\n        setLoading(false);\n        return { loading };\n      }\n      if (res.ok) {\n        const md = await res.text();\n        setMarkdown(md);\n      }\n\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, [src, loading]);\n\n  if (loading) return { loading };\n\n  const rendered = unified()\n    .use(parse)\n    .use(remark2react)\n    .processSync(markdown).contents;\n\n  return { loading, rendered };\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport usePost from \"../../hooks/usePost\";\nimport Post from \"../../components/Post\";\n\nexport default function Project() {\n  let { project } = useParams();\n\n  const { loading, post } = usePost(project, \"projects\");\n\n  if (loading) return <div>Loading...</div>;\n\n  if (!post) return <div>Post not found</div>;\n\n  return <Post {...post} />;\n}\n","import usePosts from \"./usePosts\";\n\nexport default function usePost(slug, type) {\n  const { loading, posts } = usePosts(type);\n\n  if (loading) return { loading };\n\n  return { loading, post: posts[slug] };\n}\n","import React from \"react\";\nimport PostList from \"../../components/PostList\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport Project from \"./Project\";\n\nexport default function Projects() {\n  const match = useRouteMatch();\n\n  return (\n    <div>\n      <h1>Projects</h1>\n      <Switch>\n        <Route path={`${match.path}/:project`}>\n          <Project />\n        </Route>\n        <Route path={match.path}>\n          <PostList />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Row, Col, Jumbotron } from \"reactstrap\";\nimport \"./Home.css\";\nimport PostList from \"../../components/PostList\";\n\nexport default function Home() {\n  return (\n    <Container className=\"mt-5\">\n      <Row>\n        <Col md=\"4\">\n          <img\n            className=\"rounded d-none d-md-block\"\n            alt=\"portrait\"\n            src=\"./assets/me.jpeg\"\n          />\n        </Col>\n        <Col>\n          <Jumbotron className=\"about\">\n            <h1 className=\"display-3\">Antoine Gagnon</h1>\n            <p className=\"lead\">\n              Web developer, IoT and electronics hobbyist, curious about\n              everything.\n            </p>\n            <hr className=\"my-2\" />\n            <p>\n              Currently studying Computer Science at University of Sherbrooke\n              and continuously working on my hobby projects, trying to make the\n              world a better place&trade;\n            </p>\n            <h3>Skills</h3>\n            <p>\n              My stack of choice is NodeJS, GraphQL and React but I'm always\n              looking to learn and use other frameworks.\n              <br />\n              <i class=\"fab fa-2x fa-js mr-2\" />\n              <i class=\"fab fa-2x fa-react mr-2\" />\n              <i class=\"fab fa-2x fa-node\" />\n            </p>\n            <p>\n              I'm also able to use several languages such as Java, C++ and\n              Python and learn to use the libraries required for whatever task\n              is at hand.\n            </p>\n            <h3>Socials</h3>\n            <p className=\"lead text-black\">\n              <a href=\"https://github.com/antoinegag\" className=\"link-unstyled\">\n                <i className=\"fab fa-2x fa-github mr-3 pointer\" />\n              </a>\n              <a\n                href=\"https://twitter.com/antoinegag_dev\"\n                className=\"link-unstyled\"\n              >\n                <i className=\"fab fa-2x fa-twitter mr-3\" />\n              </a>\n              <a\n                href=\"https://www.linkedin.com/in/antoine-gagnon/\"\n                className=\"link-unstyled\"\n              >\n                <i className=\"fab fa-2x fa-linkedin mr-3\" />\n              </a>\n              <a\n                href=\"https://www.instagram.com/antoineg.dev/\"\n                className=\"link-unstyled\"\n              >\n                <i className=\"fab fa-2x fa-instagram\" />\n              </a>\n            </p>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2>My projects</h2>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <PostList />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = props => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar className=\"nav\" color=\"dark\" dark expand=\"md\">\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav>\n            <NavLink tag={Link} className=\"text-white\" to=\"/\">\n              <i className=\"fas fa-home\" /> Home\n            </NavLink>\n            <NavLink tag={Link} className=\"text-white\" to=\"/projects\">\n              <i className=\"fas fa-tools\" /> Projects\n            </NavLink>\n          </Nav>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink\n                target=\"_blank\"\n                href=\"//github.com/antoinegag/antoineg.dev\"\n              >\n                <i className=\"fab fa-2x fa-github\" />\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Projects from \"./pages/Projects\";\nimport Home from \"./pages/Home\";\nimport NavBar from \"./components/NavBar\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar />\n      <Switch>\n        <Route path=\"/projects\">\n          <Projects />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}